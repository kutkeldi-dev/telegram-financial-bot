from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message
from database.database import AsyncSessionLocal
from database.crud import UserCRUD
from config import config
from bot.keyboards.inline import get_main_reply_keyboard
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("auth"))
async def auth_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split()
        if len(command_parts) != 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/auth –í–ê–®_–ö–û–î</code>",
                parse_mode="HTML"
            )
            return
        
        auth_code = command_parts[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if auth_code not in config.AUTH_CODES:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–æ–¥—É
        user_name = config.AUTH_CODES[auth_code]
        
        async with AsyncSessionLocal() as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_user = await UserCRUD.get_user_by_telegram_id(db, message.from_user.id)
            
            if existing_user and existing_user.is_authorized:
                await message.answer("‚úÖ –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
            if not existing_user:
                user = await UserCRUD.create_user(
                    db=db,
                    telegram_id=message.from_user.id,
                    username=message.from_user.username or "",
                    full_name=user_name,
                    auth_code=auth_code
                )
            else:
                existing_user.is_authorized = True
                existing_user.auth_code = auth_code
                existing_user.full_name = user_name
                await db.commit()
                user = existing_user
            
            success_text = (
                f"‚úÖ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
                f"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{user.full_name}</b>\n\n"
                f"ü§ñ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n"
                f"–ù–∞–ø–∏—à–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."
            )
            
            await message.answer(success_text, parse_mode="HTML", reply_markup=get_main_reply_keyboard())
            logger.info("User authorized successfully")
    
    except Exception as e:
        logger.error(f"Authorization error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")