from aiogram import Router, F
from aiogram.types import CallbackQuery, BufferedInputFile
from aiogram.filters import Command
from aiogram.types import Message
from services.analytics import analytics_service
from bot.keyboards.inline import get_analytics_keyboard, get_main_menu_keyboard
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.message(Command("analytics"))
async def analytics_command(message: Message, current_user):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    keyboard = get_analytics_keyboard()
    
    summary = await analytics_service.get_analytics_summary()
    
    text = f"{summary}\n\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:"
    
    await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
    logger.info(f"Analytics menu opened by user {current_user.full_name}")

@router.callback_query(F.data == "analytics")
async def show_analytics_menu(callback: CallbackQuery, current_user):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    keyboard = get_analytics_keyboard()
    
    summary = await analytics_service.get_analytics_summary()
    
    text = f"{summary}\n\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏—Ç–∏–∫–∏:"
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
    await callback.answer()
    logger.info(f"Analytics menu shown to user {current_user.full_name}")

@router.callback_query(F.data.startswith("chart_"))
async def generate_chart(callback: CallbackQuery, current_user):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
    try:
        chart_type = callback.data.split("_")[1]
        days = int(callback.data.split("_")[2]) if len(callback.data.split("_")) > 2 else 30
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≥—Ä–∞—Ñ–∏–∫...", show_alert=False)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if chart_type == "trend":
            img_buffer = await analytics_service.generate_daily_trend_chart(days)
            caption = f"üìà –î–∏–Ω–∞–º–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π"
            
        elif chart_type == "pie":
            img_buffer = await analytics_service.generate_user_pie_chart(days)
            caption = f"üç∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞ {days} –¥–Ω–µ–π"
            
        elif chart_type == "comparison":
            img_buffer = await analytics_service.generate_user_comparison_chart(days)
            caption = f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {days} –¥–Ω–µ–π"
            
        elif chart_type == "weekly":
            img_buffer = await analytics_service.generate_weekly_summary_chart()
            caption = "üìÖ –ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤"
            
        elif chart_type == "category":
            img_buffer = await analytics_service.generate_category_pie_chart(days)
            caption = f"üìä –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ {days} –¥–Ω–µ–π"
            
        else:
            await callback.message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º BufferedInputFile –∏–∑ BytesIO
        photo = BufferedInputFile(
            img_buffer.getvalue(),
            filename=f"{chart_type}_{days}days.png"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await callback.message.answer_photo(
            photo=photo,
            caption=caption,
            reply_markup=get_analytics_keyboard()
        )
        
        logger.info(f"Chart {chart_type} generated for user {current_user.full_name}")
        
    except Exception as e:
        logger.error(f"Error generating chart: {e}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_analytics_keyboard()
        )
        await callback.answer()

@router.callback_query(F.data.startswith("summary_"))
async def show_analytics_summary(callback: CallbackQuery, current_user):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    try:
        days = int(callback.data.split("_")[1])
        
        await callback.answer("üìä –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á–µ—Ç...", show_alert=False)
        
        summary = await analytics_service.get_analytics_summary(days)
        
        keyboard = get_analytics_keyboard()
        
        await callback.message.edit_text(
            summary,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        
        logger.info(f"Analytics summary ({days} days) shown to user {current_user.full_name}")
        
    except Exception as e:
        logger.error(f"Error generating summary: {e}")
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_analytics_keyboard()
        )
        await callback.answer()

@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    text = (
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = get_main_menu_keyboard()
    
    # Fix: Handle photo messages that can't be edited with text
    try:
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except Exception:
        # If editing fails (e.g., photo message), send new message
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    await callback.answer()

@router.message(Command("sync"))
async def sync_data_command(message: Message, current_user):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Google Sheets"""
    from services.google_sheets import google_sheets_service
    
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å Google Sheets...")
    
    try:
        await google_sheets_service.sync_expenses_from_sheets()
        await message.answer("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–î–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É.")
        
        logger.info("Data sync completed successfully")
        
    except Exception as e:
        logger.error(f"Sync failed: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets.")

