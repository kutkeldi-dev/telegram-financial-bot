from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from database.database import AsyncSessionLocal
from database.crud import ExpenseCRUD, ReminderCRUD
from services.google_sheets import google_sheets_service
from bot.states.expense import ExpenseForm
from bot.keyboards.inline import get_confirmation_keyboard, get_expense_completed_keyboard, get_category_selection_keyboard
from datetime import datetime, date
import logging

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(F.data == "expense")
async def start_expense_input(callback: CallbackQuery, state: FSMContext, current_user):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
    await state.set_state(ExpenseForm.waiting_amount)
    
    text = (
        f"üí∞ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{current_user.full_name}</b>\n"
        f"üìÖ –î–∞—Ç–∞: <b>{datetime.now().strftime('%d.%m.%Y')}</b>\n\n"
        f"üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ (–≤ —Å–æ–º–∞—Ö):\n"
        f"<i>–ï—Å–ª–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ –±—ã–ª–æ, –≤–≤–µ–¥–∏—Ç–µ 0</i>"
    )
    
    await callback.message.edit_text(text, parse_mode="HTML")
    await callback.answer()

@router.message(ExpenseForm.waiting_amount)
async def process_amount(message: Message, state: FSMContext, current_user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–∞"""
    try:
        # Clean and validate input
        amount_str = message.text.replace(',', '.').replace(' ', '').strip()
        amount = float(amount_str)
        
        if amount < 0:
            await message.answer("‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
            return
        
        if amount > 10000000:  # 10 million limit
            await message.answer("‚ùå –°—É–º–º–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è (–º–∞–∫—Å–∏–º—É–º 10,000,000). –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
            return
        
        # Check for reasonable decimal places
        if '.' in amount_str and len(amount_str.split('.')[1]) > 2:
            await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π (–º–∞–∫—Å–∏–º—É–º 2). –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
            return
        
        await state.update_data(amount=amount)
        await state.set_state(ExpenseForm.waiting_category)
        
        if amount == 0:
            # –î–ª—è –Ω—É–ª–µ–≤—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            try:
                async with AsyncSessionLocal() as db:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ö–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                    expense = await ExpenseCRUD.create_expense(
                        db=db,
                        user_id=current_user.id,
                        amount=0.0,
                        purpose="–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤",
                        category_name=None
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
                    await google_sheets_service.add_expense_to_sheet(
                        user_name=current_user.full_name,
                        amount=0.0,
                        purpose="–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤",
                        expense_date=expense.created_at,
                        category=None
                    )
                    
                    # –û—Ç–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
                    from datetime import date
                    from database.crud import ReminderCRUD
                    today = date.today()
                    pending_reminders = await ReminderCRUD.get_pending_reminders(db, today)
                    for reminder in pending_reminders:
                        if reminder.user_id == current_user.id:
                            await ReminderCRUD.mark_reminder_completed(db, reminder.id)
                            break
                
                success_text = (
                    f"‚úÖ <b>–ù—É–ª–µ–≤–æ–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
                    f"üìä –ó–∞–ø–∏—Å–∞–Ω–æ: –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.\n\n"
                    f"–ß—Ç–æ –¥–∞–ª—å—à–µ?"
                )
                
                await message.answer(
                    success_text,
                    parse_mode="HTML",
                    reply_markup=get_expense_completed_keyboard()
                )
                await state.clear()
                
                logger.info("Zero expense report saved successfully")
                return
                
            except Exception as e:
                logger.error(f"Error saving zero expense: {e}")
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await state.clear()
                return
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            category_text = (
                f"üí∞ –°—É–º–º–∞: <b>{amount:,.2f} —Å–æ–º</b>\n\n"
                f"üìÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:</b>"
            )
            await message.answer(category_text, parse_mode="HTML", reply_markup=get_category_selection_keyboard())
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1500.50):"
        )

@router.callback_query(F.data.startswith("category_"), ExpenseForm.waiting_category)
async def process_category_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category_map = {
        "category_1": "–õ–∏—á–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã",
        "category_2": "–ñ—ã–ª–¥—ã–∑–±–µ–∫ –∞–≤–∞", 
        "category_3": "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è",
        "category_4": "–£—Å–ª—É–≥–∞",
        "category_5": "–î—Ä—É–≥–æ–µ"
    }
    
    category_name = category_map.get(callback.data)
    if not category_name:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", show_alert=True)
        return
    
    await state.update_data(category=category_name)
    await state.set_state(ExpenseForm.waiting_purpose)
    
    data = await state.get_data()
    amount = data['amount']
    
    purpose_text = (
        f"üí∞ –°—É–º–º–∞: <b>{amount:,.2f} —Å–æ–º</b>\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{category_name}</b>\n\n"
        f"üìù <b>–í–ù–ò–ú–ê–ù–ò–ï! –°–µ–π—á–∞—Å –≤–≤–µ–¥–∏—Ç–µ –û–ü–ò–°–ê–ù–ò–ï —Ä–∞—Å—Ö–æ–¥–∞ (–ù–ï –¶–ò–§–†–´!):</b>\n\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        f"‚Ä¢ –ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞\n"
        f"‚Ä¢ –û–ø–ª–∞—Ç–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É\n"
        f"‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã\n"
        f"‚Ä¢ –õ–∏—á–Ω—ã–µ –Ω—É–∂–¥—ã\n\n"
        f"‚ùó –í–≤–µ–¥–∏—Ç–µ –¢–ï–ö–°–¢–û–ú, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–∫—É–ø–∞–ª–∏ –∏–ª–∏ –Ω–∞ —á—Ç–æ —Ç—Ä–∞—Ç–∏–ª–∏ –¥–µ–Ω—å–≥–∏"
    )
    
    await callback.message.edit_text(purpose_text, parse_mode="HTML")
    await callback.answer()

@router.message(ExpenseForm.waiting_purpose)
async def process_purpose(message: Message, state: FSMContext, current_user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–∏ —Ä–∞—Å—Ö–æ–¥–∞"""
    purpose = message.text.strip()
    
    if not purpose:
        await message.answer("‚ùå –¶–µ–ª—å —Ä–∞—Å—Ö–æ–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–µ–ª —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    if purpose.isdigit():
        await message.answer(
            "‚ùå –í—ã –≤–≤–µ–ª–∏ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã!\n\n"
            "üìù –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –û–ü–ò–°–ê–ù–ò–ï —Ä–∞—Å—Ö–æ–¥–∞ –°–õ–û–í–ê–ú–ò:\n"
            "‚Ä¢ –ß—Ç–æ –ø–æ–∫—É–ø–∞–ª–∏?\n"
            "‚Ä¢ –ù–∞ —á—Ç–æ —Ç—Ä–∞—Ç–∏–ª–∏ –¥–µ–Ω—å–≥–∏?\n"
            "‚Ä¢ –î–ª—è —á–µ–≥–æ –±—ã–ª —Ä–∞—Å—Ö–æ–¥?\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', '–û–ø–ª–∞—Ç–∞ –∞—Ä–µ–Ω–¥—ã', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç'"
        )
        return
    
    if len(purpose) > 500:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤). –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        return
    
    data = await state.get_data()
    amount = data['amount']
    category = data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
    
    await state.update_data(purpose=purpose)
    await state.set_state(ExpenseForm.waiting_confirmation)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = (
        f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞</b>\n\n"
        f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {current_user.full_name}\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y')}\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {amount:,.2f} —Å–æ–º\n"
        f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category}\n"
        f"üìù <b>–¶–µ–ª—å:</b> {purpose}\n\n"
        f"‚ùì –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞—Å—Ö–æ–¥?"
    )
    
    await message.answer(
        confirmation_text,
        parse_mode="HTML",
        reply_markup=get_confirmation_keyboard()
    )

@router.callback_query(F.data == "confirm_yes", ExpenseForm.waiting_confirmation)
async def confirm_expense(callback: CallbackQuery, state: FSMContext, current_user):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞"""
    try:
        data = await state.get_data()
        amount = data['amount']
        purpose = data['purpose']
        category = data.get('category')
        
        async with AsyncSessionLocal() as db:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Ö–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            expense = await ExpenseCRUD.create_expense(
                db=db,
                user_id=current_user.id,
                amount=amount,
                purpose=purpose,
                category_name=category
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Google Sheets
            await google_sheets_service.add_expense_to_sheet(
                user_name=current_user.full_name,
                amount=amount,
                purpose=purpose,
                expense_date=expense.created_at,
                category=category
            )
            
            # –û—Ç–º–µ—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
            today = date.today()
            pending_reminders = await ReminderCRUD.get_pending_reminders(db, today)
            for reminder in pending_reminders:
                if reminder.user_id == current_user.id:
                    await ReminderCRUD.mark_reminder_completed(db, reminder.id)
                    break
        
        success_text = (
            f"‚úÖ <b>–†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"
            f"üìä –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ –∏ Google –¢–∞–±–ª–∏—Ü—É.\n\n"
            f"–ß—Ç–æ –¥–∞–ª—å—à–µ?"
        )
        
        await callback.message.edit_text(
            success_text,
            parse_mode="HTML",
            reply_markup=get_expense_completed_keyboard()
        )
        await callback.answer("–†–∞—Å—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        await state.clear()
        
        logger.info("Expense saved successfully")
        
    except Exception as e:
        logger.error(f"Error saving expense: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await callback.answer()
        await state.clear()

@router.callback_query(F.data == "confirm_no", ExpenseForm.waiting_confirmation)
async def cancel_expense(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
    from bot.keyboards.inline import get_main_menu_keyboard
    
    await callback.message.edit_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\nüè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()