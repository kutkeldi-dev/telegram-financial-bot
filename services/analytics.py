import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib import rcParams
import pandas as pd
import numpy as np
from datetime import datetime, timedelta, date
from sqlalchemy import func
from database.database import AsyncSessionLocal
from database.models import Expense, User
from typing import List, Dict, Optional
import io
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ matplotlib –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
rcParams['font.family'] = 'DejaVu Sans'
plt.rcParams['axes.unicode_minus'] = False

logger = logging.getLogger(__name__)

class AnalyticsService:
    def __init__(self):
        self.colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A', '#98D8C8', '#F7DC6F', '#BB8FCE', '#85C1E9']
    
    async def get_expense_data(self, days: int = 30) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π"""
        async with AsyncSessionLocal() as db:
            end_date = date.today()
            start_date = end_date - timedelta(days=days)
            
            # SQLite-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∑–∞–ø—Ä–æ—Å
            from sqlalchemy import text
            result = await db.execute(
                text("""
                SELECT 
                    DATE(expense_date) as date,
                    SUM(amount) as total_amount,
                    COUNT(*) as count,
                    u.full_name as user_name,
                    u.id as user_id
                FROM expenses e
                JOIN users u ON e.user_id = u.id
                WHERE DATE(expense_date) >= :start_date 
                AND DATE(expense_date) <= :end_date
                GROUP BY DATE(expense_date), u.id, u.full_name
                ORDER BY DATE(expense_date)
                """),
                {"start_date": start_date, "end_date": end_date}
            )
            
            return [dict(row._mapping) for row in result.fetchall()]
    
    async def get_user_totals(self, days: int = 30) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–∏—Ö —Ç—Ä–∞—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        async with AsyncSessionLocal() as db:
            end_date = date.today()
            start_date = end_date - timedelta(days=days)
            
            from sqlalchemy import text
            result = await db.execute(
                text("""
                SELECT 
                    u.full_name as user_name,
                    SUM(e.amount) as total_amount,
                    COUNT(e.id) as expense_count,
                    AVG(e.amount) as avg_amount
                FROM expenses e
                JOIN users u ON e.user_id = u.id
                WHERE DATE(expense_date) >= :start_date 
                AND DATE(expense_date) <= :end_date
                GROUP BY u.id, u.full_name
                ORDER BY total_amount DESC
                """),
                {"start_date": start_date, "end_date": end_date}
            )
            
            return [dict(row._mapping) for row in result.fetchall()]
    
    async def generate_daily_trend_chart(self, days: int = 30) -> io.BytesIO:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –ø–æ –¥–Ω—è–º"""
        data = await self.get_expense_data(days)
        
        if not data:
            return await self._generate_no_data_chart("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(data)
        df['date'] = pd.to_datetime(df['date'])
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ —Å—É–º–º–∏—Ä—É–µ–º
        daily_totals = df.groupby('date')['total_amount'].sum().reset_index()
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        fig = plt.figure(figsize=(12, 6))
        try:
            plt.plot(daily_totals['date'], daily_totals['total_amount'], 
                    marker='o', linewidth=2, markersize=6, color='#4ECDC4')
            
            plt.title(f'–î–∏–Ω–∞–º–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {days} –¥–Ω–µ–π', fontsize=16, pad=20)
            plt.xlabel('–î–∞—Ç–∞', fontsize=12)
            plt.ylabel('–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ (—Å–æ–º)', fontsize=12)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–µ–π
            plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
            plt.gca().xaxis.set_major_locator(mdates.DayLocator(interval=max(1, days//10)))
            plt.xticks(rotation=45)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É
            plt.grid(True, alpha=0.3)
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
            img_buffer = io.BytesIO()
            plt.savefig(img_buffer, format='png', dpi=300, bbox_inches='tight')
            img_buffer.seek(0)
            
            return img_buffer
        finally:
            plt.close(fig)  # Always close figure
    
    async def generate_user_pie_chart(self, days: int = 30) -> io.BytesIO:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        data = await self.get_user_totals(days)
        
        if not data:
            return await self._generate_no_data_chart("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        users = [item['user_name'] for item in data]
        amounts = [float(item['total_amount']) for item in data]
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        plt.figure(figsize=(10, 8))
        wedges, texts, autotexts = plt.pie(amounts, labels=users, autopct='%1.1f%%', 
                                          colors=self.colors[:len(users)], startangle=90)
        
        plt.title(f'üç∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞ {days} –¥–Ω–µ–π', 
                 fontsize=16, pad=20)
        
        # –£–ª—É—á—à–∞–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
        for autotext in autotexts:
            autotext.set_color('white')
            autotext.set_fontweight('bold')
        
        plt.axis('equal')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É —Å —Å—É–º–º–∞–º–∏
        legend_labels = [f'{user}: {amount:,.0f} —Å–æ–º' 
                        for user, amount in zip(users, amounts)]
        plt.legend(legend_labels, loc='center left', bbox_to_anchor=(1, 0.5))
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', dpi=300, bbox_inches='tight')
        img_buffer.seek(0)
        plt.close()
        
        return img_buffer
    
    async def generate_user_comparison_chart(self, days: int = 30) -> io.BytesIO:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        data = await self.get_user_totals(days)
        
        if not data:
            return await self._generate_no_data_chart("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        users = [item['user_name'] for item in data]
        amounts = [float(item['total_amount']) for item in data]
        counts = [int(item['expense_count']) for item in data]
        
        # –°–æ–∑–¥–∞–µ–º subplot —Å –¥–≤—É–º—è –æ—Å—è–º–∏ Y
        fig, ax1 = plt.subplots(figsize=(12, 8))
        
        # –°—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å—É–º–º
        x_pos = np.arange(len(users))
        bars1 = ax1.bar(x_pos - 0.2, amounts, 0.4, label='–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤', 
                       color='#4ECDC4', alpha=0.8)
        
        ax1.set_xlabel('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', fontsize=12)
        ax1.set_ylabel('–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ (—Å–æ–º)', color='#4ECDC4', fontsize=12)
        ax1.tick_params(axis='y', labelcolor='#4ECDC4')
        
        # –í—Ç–æ—Ä–∞—è –æ—Å—å –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
        ax2 = ax1.twinx()
        bars2 = ax2.bar(x_pos + 0.2, counts, 0.4, label='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π', 
                       color='#FF6B6B', alpha=0.8)
        
        ax2.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π', color='#FF6B6B', fontsize=12)
        ax2.tick_params(axis='y', labelcolor='#FF6B6B')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        ax1.set_xticks(x_pos)
        ax1.set_xticklabels(users, rotation=45, ha='right')
        ax1.set_title(f'üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {days} –¥–Ω–µ–π', 
                     fontsize=16, pad=20)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
        for bar, amount in zip(bars1, amounts):
            height = bar.get_height()
            ax1.text(bar.get_x() + bar.get_width()/2., height + height*0.01,
                    f'{amount:,.0f}', ha='center', va='bottom', fontsize=9)
        
        for bar, count in zip(bars2, counts):
            height = bar.get_height()
            ax2.text(bar.get_x() + bar.get_width()/2., height + height*0.01,
                    f'{count}', ha='center', va='bottom', fontsize=9)
        
        # –õ–µ–≥–µ–Ω–¥–∞
        lines1, labels1 = ax1.get_legend_handles_labels()
        lines2, labels2 = ax2.get_legend_handles_labels()
        ax1.legend(lines1 + lines2, labels1 + labels2, loc='upper left')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', dpi=300, bbox_inches='tight')
        img_buffer.seek(0)
        plt.close()
        
        return img_buffer
    
    async def generate_weekly_summary_chart(self) -> io.BytesIO:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å–≤–æ–¥–∫–∏"""
        data = await self.get_expense_data(7)
        
        if not data:
            return await self._generate_no_data_chart("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é")
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏ –¥–Ω—è–º
        df = pd.DataFrame(data)
        df['date'] = pd.to_datetime(df['date'])
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        pivot_table = df.pivot_table(
            index='date', 
            columns='user_name', 
            values='total_amount', 
            fill_value=0,
            aggfunc='sum'
        )
        
        # –°–æ–∑–¥–∞–µ–º stacked bar chart
        plt.figure(figsize=(12, 8))
        
        bottom = np.zeros(len(pivot_table.index))
        
        for i, user in enumerate(pivot_table.columns):
            plt.bar(pivot_table.index, pivot_table[user], 
                   bottom=bottom, label=user, color=self.colors[i % len(self.colors)])
            bottom += pivot_table[user]
        
        plt.title('–ù–µ–¥–µ–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –¥–Ω—è–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', 
                 fontsize=16, pad=20)
        plt.xlabel('–î–∞—Ç–∞', fontsize=12)
        plt.ylabel('–°—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ (—Å–æ–º)', fontsize=12)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
        plt.xticks(rotation=45)
        plt.legend()
        plt.grid(True, alpha=0.3, axis='y')
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', dpi=300, bbox_inches='tight')
        img_buffer.seek(0)
        plt.close()
        
        return img_buffer
    
    async def _generate_no_data_chart(self, message: str) -> io.BytesIO:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–ª—É—à–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        plt.figure(figsize=(10, 6))
        plt.text(0.5, 0.5, message, ha='center', va='center', 
                fontsize=16, transform=plt.gca().transAxes)
        plt.title('–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤', fontsize=18, pad=20)
        plt.axis('off')
        
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', dpi=300, bbox_inches='tight')
        img_buffer.seek(0)
        plt.close()
        
        return img_buffer
    
    async def get_analytics_summary(self, days: int = 30) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π —Å–≤–æ–¥–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        user_data = await self.get_user_totals(days)
        expense_data = await self.get_expense_data(days)
        
        if not user_data:
            return "üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        
        # –û–±—â–∞—è —Å—É–º–º–∞
        total_amount = sum(item['total_amount'] for item in user_data)
        total_count = sum(item['expense_count'] for item in user_data)
        avg_per_day = total_amount / days if days > 0 else 0
        
        # –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        top_user = max(user_data, key=lambda x: x['total_amount'])
        
        summary = f"""üìä <b>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ {days} –¥–Ω–µ–π</b>

üí∞ <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ: <b>{total_amount:,.2f} —Å–æ–º</b>
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ü–∏–π: <b>{total_count}</b>
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ —Ç—Ä–∞—Ç—ã –≤ –¥–µ–Ω—å: <b>{avg_per_day:.2f} —Å–æ–º</b>

üë§ <b>–°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π:</b>
‚Ä¢ {top_user['user_name']} - {top_user['total_amount']:,.2f} —Å–æ–º ({top_user['expense_count']} –æ–ø–µ—Ä–∞—Ü–∏–π)

üìà <b>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:</b> {total_amount/total_count if total_count > 0 else 0:.2f} —Å–æ–º"""
        
        return summary
    
    async def get_category_data(self, days: int = 30) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        async with AsyncSessionLocal() as db:
            end_date = date.today()
            start_date = end_date - timedelta(days=days)
            
            from sqlalchemy import text
            result = await db.execute(
                text("""
                SELECT 
                    COALESCE(ec.name, '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏') as category_name,
                    SUM(e.amount) as total_amount,
                    COUNT(e.id) as expense_count,
                    AVG(e.amount) as avg_amount
                FROM expenses e
                LEFT JOIN expense_categories ec ON e.category_id = ec.id
                WHERE DATE(expense_date) >= :start_date 
                AND DATE(expense_date) <= :end_date
                GROUP BY ec.name
                ORDER BY total_amount DESC
                """),
                {"start_date": start_date, "end_date": end_date}
            )
            
            return [dict(row._mapping) for row in result.fetchall()]
    
    async def generate_category_pie_chart(self, days: int = 30) -> io.BytesIO:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        data = await self.get_category_data(days)
        
        if not data:
            return await self._generate_no_data_chart("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        categories = [item['category_name'] for item in data]
        amounts = [float(item['total_amount']) for item in data]
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        plt.figure(figsize=(10, 8))
        wedges, texts, autotexts = plt.pie(amounts, labels=categories, autopct='%1.1f%%', 
                                          colors=self.colors[:len(categories)], startangle=90)
        
        plt.title(f'–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∑–∞ {days} –¥–Ω–µ–π', 
                 fontsize=16, pad=20)
        
        # –£–ª—É—á—à–∞–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
        for autotext in autotexts:
            autotext.set_color('white')
            autotext.set_fontweight('bold')
        
        plt.axis('equal')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É —Å —Å—É–º–º–∞–º–∏
        legend_labels = [f'{cat}: {amount:,.0f} —Å–æ–º' 
                        for cat, amount in zip(categories, amounts)]
        plt.legend(legend_labels, loc='center left', bbox_to_anchor=(1, 0.5))
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ BytesIO
        img_buffer = io.BytesIO()
        plt.savefig(img_buffer, format='png', dpi=300, bbox_inches='tight')
        img_buffer.seek(0)
        plt.close()
        
        return img_buffer

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
analytics_service = AnalyticsService()